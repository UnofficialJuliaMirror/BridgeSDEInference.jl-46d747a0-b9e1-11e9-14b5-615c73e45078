#NOTE deprecating an substituting with Workspace
"""
    initialise(::ObsScheme, P, m, y::StartingPtPrior{T}, ::S, fpt)

Initialise the workspace for MCMC algorithm. Initialises containers for driving
Wiener processes `WW·µí` & `WW`, for diffusion processes `XX·µí` & `XX`, for
diffusion Law `P·µí` (parametetrised by proposal parameters) and defines the type
of Wiener process `Wnr`.
"""
function initialise(::ObsScheme, P, m, yPr::StartingPtPrior{T}, ::S,
                    fpt) where {ObsScheme <: AbstractObsScheme,T,S}
    y = startPt(yPr)
    P·µí = deepcopy(P)
    TW = typeof(sample([0], Wiener{S}()))
    TX = typeof(SamplePath([], zeros(T, 0)))
    XX·µí = Vector{TX}(undef,m)
    WW·µí = Vector{TW}(undef,m)
    Wnr = Wiener{S}()
    for i in 1:m
        WW·µí[i] = Bridge.samplepath(P[i].tt, zero(S))
        sample!(WW·µí[i], Wnr)
        WW·µí[i], XX·µí[i] = forcedSolve(Euler(), y, WW·µí[i], P[i])    # this will enforce adherence to domain
        while !checkFpt(ObsScheme(), XX·µí[i], fpt[i])
            sample!(WW·µí[i], Wnr)
            forcedSolve!(Euler(), XX·µí[i], y, WW·µí[i], P[i])    # this will enforce adherence to domain
        end
        y = XX·µí[i].yy[end]
    end
    y = startPt(yPr)
    ll = logpdf(yPr, y)
    ll += pathLogLikhd(ObsScheme(), XX·µí, P, 1:m, fpt, skipFPT=true)
    ll += lobslikelihood(P[1], y)

    XX = deepcopy(XX·µí)
    WW = deepcopy(WW·µí)
    # needed for proper initialisation of the Crank-Nicolson scheme
    yPr = invStartPt(y, yPr, P[1])

    Wnr, WW·µí, WW, XX·µí, XX, P·µí, ll, yPr
end


#NOTE deprecated
"""
    swapXX!(ùîÖ::ChequeredBlocking, XX)

Swap containers between `XX` and `ùîÖ.XX`
"""
function swapXX!(ùîÖ::BlockingSchedule, XX)
    for block in ùîÖ.blocks[ùîÖ.idx]
        swap!(XX, ùîÖ.XX, block)
    end
end

#NOTE deprecated
"""
    swapXX!(ùîÖ::NoBlocking, XX)

nothing to do
"""
swapXX!(ùîÖ::NoBlocking, XX) = nothing



#NOTE deprecated
"""
    impute!(::ObsScheme, ùîÖ::ChequeredBlocking, Wnr, y, WW·µí, WW, XX·µí, XX, P, ll,
            fpt; œÅ=0.0, verbose=false, it=NaN, headStart=false) where
            ObsScheme <: AbstractObsScheme -> acceptedLogLikhd, acceptDecision

Imputation step of the MCMC scheme (without blocking).
...
# Arguments
- `::ObsScheme`: observation scheme---first-passage time or partial observations
- `ùîÖ`: object with relevant information about blocking
- `Wnr`: type of the Wiener process
- `yPr`: prior over the starting point of the diffusion path
- `WW·µí`: containers for proposal Wiener paths
- `WW`: containers with old Wiener paths
- `XX·µí`: containers for proposal diffusion paths
- `XX`: containers with old diffusion paths
- `P`: laws of the diffusion path (proposal and target)
- `11`: log-likelihood of the old (previously accepted) diffusion path
- `fpt`: info about first-passage time conditioning
- `œÅ`: memory parameter for the Crank-Nicolson scheme
- `verbose`: whether to print updates info while sampling
- `it`: iteration index of the MCMC algorithm
- `headStart`: flag for whether to 'ease into' fpt conditions
...
"""
function impute!_deprecated(::ObsScheme, ùîÖ::ChequeredBlocking, Wnr, yPr, WW·µí, WW, XX·µí, XX,
                 P, ll, fpt; œÅ=0.0, verbose=false, it=NaN, headStart=false,
                 solver::ST=Ralston3()) where
                 {ObsScheme <: AbstractObsScheme, ST}
    Œ∏ = params(P[1].Target)             # current parameter
    ùîÖ = next(ùîÖ, XX, Œ∏)
    solveBackRec!(ùîÖ, ùîÖ.P, ST())         # compute (H, HŒΩ, c) for given blocks

    swapXX!(ùîÖ, XX)                      # move current path to object ùîÖ
    noiseFromPath!(ùîÖ, ùîÖ.XX, ùîÖ.WW, ùîÖ.P) # find noise WW that generates XX under ùîÖ

    # compute white noise generating starting point under ùîÖ
    yPrùîÖ = invStartPt(ùîÖ.XX[1].yy[1], yPr, ùîÖ.P[1])

    for (blockIdx, block) in enumerate(ùîÖ.blocks[ùîÖ.idx])
        blockFlag = Val{block[1]}()
        y = ùîÖ.XX[block[1]].yy[1]       # current starting point

        # set the starting point for the block
        y·µí, yPr·µí = proposalStartPt(ùîÖ, blockFlag, y, yPrùîÖ, ùîÖ.P[block[1]], œÅ)

        # sample path in block
        sampleSegments!(block, Wnr, ùîÖ.WW, ùîÖ.WW·µí, ùîÖ.P, y·µí, ùîÖ.XX·µí, œÅ)
        setEndPtManually!(ùîÖ, blockIdx, block)

        # loglikelihoods
        ll·µí = startPtLogPdf(blockFlag, yPr·µí, y·µí)
        ll·µí += pathLogLikhd(ObsScheme(), ùîÖ.XX·µí, ùîÖ.P, block, fpt)
        ll·µí += lobslikelihood(ùîÖ.P[block[1]], y·µí)

        llPrev = startPtLogPdf(blockFlag, yPrùîÖ, y)
        llPrev += pathLogLikhd(ObsScheme(), ùîÖ.XX, ùîÖ.P, block, fpt; skipFPT=true)
        llPrev += lobslikelihood(ùîÖ.P[block[1]], y)

        printInfo(verbose, it, value(llPrev), value(ll·µí), "impute")
        if acceptSample(ll·µí-llPrev, verbose)
            swap!(ùîÖ.XX, ùîÖ.XX·µí, block)
            registerAccpt!(ùîÖ, blockIdx, true)
            yPrùîÖ = yPr·µí # can do something non-trivial only for the first block
        else
            registerAccpt!(ùîÖ, blockIdx, false)
        end
    end
    swapXX!(ùîÖ, XX) # move accepted path from object ùîÖ to general container XX
    noiseFromPath!(ùîÖ, XX, WW, P) # compute noise WW that generated XX under law P
    # compute white noise generating starting point under P
    y = XX[1].yy[1]
    yPr = invStartPt(y, yPrùîÖ, P[1])

    ll = logpdf(yPr, y) # starting point contribution
    ll += pathLogLikhd(ObsScheme(), XX, P, 1:length(P), fpt; skipFPT=true)
    ll += lobslikelihood(P[1], y)

    # acceptance indicator does not matter for sampling with blocking
    return ll, true, ùîÖ, yPr
end
