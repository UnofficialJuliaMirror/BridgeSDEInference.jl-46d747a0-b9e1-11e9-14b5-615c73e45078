using Bridge
using Bridge.Models: ‚Ñù
import Bridge: b, œÉ, B, Œ≤, a, constdiff

struct DoubleWellPotential <: ContinuousTimeProcess{‚Ñù{1}}
    œÅ::Float64
    Œº::Float64
    œÉ::Float64
end

b(t, x, P::DoubleWellPotential) = ‚Ñù{1}(-P.œÅ*x[1]*(x[1]^2-P.Œº))
œÉ(t, x, P::DoubleWellPotential) = ‚Ñù{1}(P.œÉ)
constdiff(::DoubleWellPotential) = true
clone(::DoubleWellPotential, Œ∏) = DoubleWellPotential(Œ∏...)
clone(::DoubleWellPotential, Œ∏, ùì£) = clone(DoubleWellPotential(), (Œ∏[1:2]..., ùì£))
params(P::DoubleWellPotential) = [P.œÅ, P.Œº, P.œÉ]

struct DoubleWellPotentialAux <: ContinuousTimeProcess{‚Ñù{1}}
    œÅ::Float64
    Œº::Float64
    œÉ::Float64
    t::Float64
    u::Float64
    T::Float64
    v::Float64
end

B(t, P::DoubleWellPotentialAux) = @SMatrix [0.0]
Œ≤(t, P::DoubleWellPotentialAux) = ‚Ñù{1}(0.0)
œÉ(t, P::DoubleWellPotentialAux) = ‚Ñù{1}(P.œÉ)
dependsOnParams(::DoubleWellPotentialAux) = (3,)
constdiff(::DoubleWellPotentialAux) = true
b(t, x, P::DoubleWellPotentialAux) = B(t, P) * x + Œ≤(t, P)
a(t, P::DoubleWellPotentialAux) = œÉ(t, P) * œÉ(t, P)'
clone(P::DoubleWellPotentialAux, Œ∏) = DoubleWellPotentialAux(Œ∏..., P.t, P.u, P.T, P.v)
clone(P::DoubleWellPotentialAux, Œ∏, ùì£) = clone(P, (Œ∏[1:2]..., ùì£))
