using Bridge
using Bridge.Models: ‚Ñù
import Bridge: b, œÉ, B, Œ≤, a, constdiff

struct SinDiffusion <: ContinuousTimeProcess{‚Ñù{1}}
    a::Float64
    b::Float64
    c::Float64
    œÉ::Float64
end

b(t, x, P::SinDiffusion) = ‚Ñù{1}(P.a + P.b*sin.(P.c * x))
œÉ(t, x, P::SinDiffusion) = ‚Ñù{1}(P.œÉ)
constdiff(::SinDiffusion) = true
clone(::SinDiffusion, Œ∏) = SinDiffusion(Œ∏...)
clone(::SinDiffusion, Œ∏, ùì£) = clone(SinDiffusion(), (Œ∏[1:3]..., ùì£))
params(P::SinDiffusion) = [P.a, P.b, P.c, P.œÉ]

struct SinDiffusionAux <: ContinuousTimeProcess{‚Ñù{1}}
    a::Float64
    b::Float64
    c::Float64
    œÉ::Float64
    t::Float64
    u::Float64
    T::Float64
    v::Float64
end

B(t, P::SinDiffusionAux) = @SMatrix [0.0]
Œ≤(t, P::SinDiffusionAux) = ‚Ñù{1}(0.0)
œÉ(t, P::SinDiffusionAux) = ‚Ñù{1}(P.œÉ)
dependsOnParams(::SinDiffusionAux) = (4,)
constdiff(::SinDiffusionAux) = true
b(t, x, P::SinDiffusionAux) = B(t, P) * x + Œ≤(t, P)
a(t, P::SinDiffusionAux) = œÉ(t, P) * œÉ(t, P)'
clone(P::SinDiffusionAux, Œ∏) = SinDiffusionAux(Œ∏..., P.t, P.u, P.T, P.v)
clone(P::SinDiffusionAux, Œ∏, ùì£) = clone(P, (Œ∏[1:3]..., ùì£))
